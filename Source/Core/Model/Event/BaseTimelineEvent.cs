using System;
using UniRx;

namespace UniBeat.RhythmEngine
{
    public abstract class BaseTimelineEvent : ITimelineEvent
    {
        public virtual double Index { get; set; }
        public virtual TimelineRange Range => new TimelineRange(Index, Index);
        public int IndexAsInt => (int)Math.Round(Index);

        // Only populated if we were generated by an ITimelineEventGenerator
        public ITimelineEventParent Parent { get; set; }

        // How far from the timeline's vertical centre do we
        // offset this particular event (if we render it to screen).
        public float VerticalOffset { get; set; } = 0f;
        public virtual bool ExcludeFromTimeline => false;
        public bool HasBeenEmitted => EmitCount > 0;
        public int EmitCount { get; private set; }

        // Every time this event is emitted by the Timeline, we stream the timeline sixteenth index that we were emitted on.
        public IObservable<double> Emissions => _emissions.AsObservable();
        private readonly Subject<double> _emissions = new Subject<double>();

        public virtual void OnEmit(double index)
        {
            EmitCount++;
            _emissions.OnNext(index);
        }

        public virtual void Reset()
        {
            EmitCount = 0;
        }
    }
}
